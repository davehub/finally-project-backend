const mongoose = require('mongoose');
const dotenv = require('dotenv');
const Role = require('../models/Role'); // Pour l'initialisation des r√¥les par d√©faut

dotenv.config();

/**
 * Connecte l'application √† la base de donn√©es MongoDB et initialise les r√¥les par d√©faut.
 */
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI);
    console.log('üéâ Connect√© √† MongoDB avec succ√®s !');
    // Initialiser les r√¥les par d√©faut apr√®s la connexion r√©ussie
    await initializeDefaultRoles();
  } catch (err) {
    console.error('‚ùå √âchec de la connexion √† MongoDB:', err);
    process.exit(1); // Quitter le processus si la connexion √©choue
  }
};

/**
 * Initialise les r√¥les 'admin' et 'user' dans la base de donn√©es s'ils n'existent pas d√©j√†.
 */
const initializeDefaultRoles = async () => {
  try {
    const rolesCount = await Role.countDocuments();
    if (rolesCount === 0) {
      console.log('‚è≥ Aucun r√¥le trouv√©, initialisation des r√¥les par d√©faut...');
      await Role.create([
        { name: 'admin', permissions: ['manage_users', 'manage_materials', 'manage_categories', 'manage_roles'] },
        { name: 'user', permissions: ['view_materials', 'view_categories'] }
      ]);
      console.log('‚úÖ R√¥les par d√©faut (admin, user) ajout√©s.');
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation des r√¥les par d√©faut:', error);
  }
};

module.exports = connectDB;